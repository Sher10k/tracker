/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmLidarScalaUnfilteredObjectAttributes_hpp__
#define __ZcmLidarScalaUnfilteredObjectAttributes_hpp__

#include <vector>
#include "ZcmLidarScalaContourPoint.hpp"


/**
 * @struct ZcmLidarScalaUnfilteredObjectAttributes
 * @brief Сырые не отфильтрованные параметры
 * @var ZcmLidarScalaUnfilteredObjectAttributes::relativeTimeOfMeasure
 * @brief - время с момента начала измерения (мс)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::positionClosestObjectPointX
 * @brief - ближайшая точка объекта по оси X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::positionClosestObjectPointY
 * @brief - ближайшая точка объекта по оси Y (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeX
 * @brief - расстояние до объекта по оси X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeY
 * @brief - расстояние до объекта по оси Y (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeWidth
 * @brief - ширина объекта (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeLength
 * @brief - длина объекта (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeSigmaX
 * @brief - погрешность размера объекта по X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxSizeSigmaY
 * @brief - погрешность размера объекта по Y (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxOrientation
 * @brief - Угол поворота объекта (градусы)
 *  
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxOrientationSigma
 * @brief - Погрешность угла поворота объекта (градусы)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::objectBoxHeight
 * @brief - высота объекта (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointLocation 
 * @brief - расположение базовой точки объекта \n
 * 				0x0 - CenterOfGravity \n
 * 				0x1 - FrontLeft       \n 
 * 				0x2 - FrontRight      \n 
 * 				0x3 - RearRight       \n
 * 				0x4 - RearLeft        \n
 * 				0x5 - FrontCenter     \n
 * 				0x6 - RightCenter     \n
 * 				0x7 - RearCenter      \n
 * 				0x8 - LeftCenter      \n
 * 				0x9 - ObjectCenter    \n
 * 				0xff - Unknown         
 *  
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointCoordX
 * @brief - расстояние до базовой точки по оси X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointCoordY
 * @brief - расстояние до базовой точки по оси Y (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointCoordSigmaX
 * @brief - погрешность расстояния до базовой точки по оси X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointCoordSigmaY
 * @brief - погрешность Расстояние до базовой точки по оси X (м)
 * @var ZcmLidarScalaUnfilteredObjectAttributes::referencePointPositionCorrCoeff
 * @brief - ???
 * @var ZcmLidarScalaUnfilteredObjectAttributes::existenceProbaility
 * @brief - вероятность существования
 * @var ZcmLidarScalaUnfilteredObjectAttributes::possibleNbOfContourPoints
 * @brief - количество точек контура объекта
 * @var ZcmLidarScalaUnfilteredObjectAttributes::contourPoints
 * @brief - точки контура объекта
 *
 */
class ZcmLidarScalaUnfilteredObjectAttributes
{
    public:
        int32_t    relativeTimeOfMeasure;

        float      positionClosestObjectPointX;

        float      positionClosestObjectPointY;

        float      objectBoxSizeX;

        float      objectBoxSizeY;

        float      objectBoxSizeSigmaX;

        float      objectBoxSizeSigmaY;

        float      objectBoxOrientation;

        float      objectBoxOrientationSigma;

        float      objectBoxHeight;

        int16_t    referencePointLocation;

        float      referencePointCoordX;

        float      referencePointCoordY;

        float      referencePointCoordSigmaX;

        float      referencePointCoordSigmaY;

        int16_t    referencePointPositionCorrCoeff;

        float      existenceProbaility;

        int16_t    possibleNbOfContourPoints;

        std::vector< ZcmLidarScalaContourPoint > contourPoints;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmLidarScalaUnfilteredObjectAttributes() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmLidarScalaUnfilteredObjectAttributes"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmLidarScalaUnfilteredObjectAttributes::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmLidarScalaUnfilteredObjectAttributes::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmLidarScalaUnfilteredObjectAttributes::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmLidarScalaUnfilteredObjectAttributes::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmLidarScalaUnfilteredObjectAttributes::getTypeName()
{
    return "ZcmLidarScalaUnfilteredObjectAttributes";
}

int ZcmLidarScalaUnfilteredObjectAttributes::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->relativeTimeOfMeasure, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->positionClosestObjectPointX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->positionClosestObjectPointY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientationSigma, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxHeight, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointLocation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->referencePointPositionCorrCoeff, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->existenceProbaility, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->possibleNbOfContourPoints, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->possibleNbOfContourPoints; ++a0) {
        thislen = this->contourPoints[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

int ZcmLidarScalaUnfilteredObjectAttributes::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->relativeTimeOfMeasure, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->positionClosestObjectPointX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->positionClosestObjectPointY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientationSigma, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxHeight, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointLocation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointCoordSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->referencePointPositionCorrCoeff, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->existenceProbaility, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->possibleNbOfContourPoints, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->contourPoints.resize(this->possibleNbOfContourPoints);
    for (int a0 = 0; a0 < this->possibleNbOfContourPoints; ++a0) {
        thislen = this->contourPoints[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

uint32_t ZcmLidarScalaUnfilteredObjectAttributes::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->possibleNbOfContourPoints; ++a0) {
        enc_size += this->contourPoints[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t ZcmLidarScalaUnfilteredObjectAttributes::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmLidarScalaUnfilteredObjectAttributes::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmLidarScalaUnfilteredObjectAttributes::getHash };

    uint64_t hash = (uint64_t)0xcd5ea924fe640766LL +
         ZcmLidarScalaContourPoint::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
