/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmObstacle_hpp__
#define __ZcmObstacle_hpp__

#include <string>
#include "ZcmObstacleGeometry.hpp"


/**
 * @struct ZcmObstacle
 * @brief Cодержит информацию о распознанном препятствии
 * @var ZcmObstacle::id_tracking
 * @brief - идентификатор препятствия отслеживаемый (физический)
 * @var ZcmObstacle::zone
 * @brief - идентификатор зоны
 *               ( ID : LABEL )
 *                  0 : UNKNOWN     - неопределено
 *                  1 : RED         - красная (габарит подвижного состава)
 *                  2 : YELLOW      - желтая (зона повышенного внимания со снижением скорости)
 *                  3 : BROWN       - коричневая (зона отслеживания объектов)
 * @var ZcmObstacle::id_type
 * @brief - идентификатор типа препятствия
 * @var ZcmObstacle::label_type
 * @brief - наименование типа препятствия
 *               ( ID : LABEL )
 *                  0 : UNKNOWN       - неопределено
 *                  1 : SMALL         - маленький объект ( меньше 1 метров по ширине )
 *                  2 : MEDIUM        - объект среднего размера
 *                  3 : BIG           - большой объект ( больше 3 метров по ширине )
 *                  4 : PERSON        - человек
 *                  5 : CAR           - вагон
 *                  6 : TRAFFIC_LIGHT - светофор
 * @var ZcmObstacle::distance_x
 * @brief - расстояние до препятствия (продольное), в метрах
 * @var ZcmObstacle::distance_y
 * @brief - расстояние до препятствия (поперечное, от центральной линии), в метрах
 * @var ZcmObstacle::probability
 * @brief - вероятность существования препятствия: от 0 до 1
 * @var ZcmObstacle::bounding_box
 * @brief - описание размера препятствия
 *
 */
class ZcmObstacle
{
    public:
        int32_t    id_tracking;

        int32_t    zone;

        int32_t    id_type;

        std::string label_type;

        double     distance_x;

        double     distance_y;

        double     probability;

        ZcmObstacleGeometry bounding_box;

    public:
        #if __cplusplus > 199711L /* if c++11 */
        static constexpr int8_t   ZONE_UNKNOWN = 0;
        static constexpr int8_t   ZONE_RED = 1;
        static constexpr int8_t   ZONE_YELLOW = 2;
        static constexpr int8_t   ZONE_BROWN = 3;
        static constexpr int8_t   OBSTACLE_TYPE_UNKNOWN = 0;
        static constexpr int8_t   OBSTACLE_TYPE_SMALL = 1;
        static constexpr int8_t   OBSTACLE_TYPE_MEDIUM = 2;
        static constexpr int8_t   OBSTACLE_TYPE_BIG = 3;
        static constexpr int8_t   OBSTACLE_TYPE_PERSON = 4;
        static constexpr int8_t   OBSTACLE_TYPE_CAR = 5;
        static constexpr int8_t   OBSTACLE_TYPE_TRAFFIC_LIGHT = 6;
        #else
        static const     int8_t   ZONE_UNKNOWN = 0;
        static const     int8_t   ZONE_RED = 1;
        static const     int8_t   ZONE_YELLOW = 2;
        static const     int8_t   ZONE_BROWN = 3;
        static const     int8_t   OBSTACLE_TYPE_UNKNOWN = 0;
        static const     int8_t   OBSTACLE_TYPE_SMALL = 1;
        static const     int8_t   OBSTACLE_TYPE_MEDIUM = 2;
        static const     int8_t   OBSTACLE_TYPE_BIG = 3;
        static const     int8_t   OBSTACLE_TYPE_PERSON = 4;
        static const     int8_t   OBSTACLE_TYPE_CAR = 5;
        static const     int8_t   OBSTACLE_TYPE_TRAFFIC_LIGHT = 6;
        #endif

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmObstacle() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmObstacle"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmObstacle::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmObstacle::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmObstacle::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmObstacle::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmObstacle::getTypeName()
{
    return "ZcmObstacle";
}

int ZcmObstacle::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->id_tracking, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->zone, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->id_type, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    char* label_type_cstr = (char*) this->label_type.c_str();
    thislen = __string_encode_array(buf, offset + pos, maxlen - pos, &label_type_cstr, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->distance_x, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->distance_y, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->probability, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->bounding_box._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmObstacle::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->id_tracking, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->zone, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->id_type, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    int32_t __label_type_len__;
    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__label_type_len__, 1);
    if(thislen < 0) return thislen; else pos += thislen;
    if((uint32_t)__label_type_len__ > maxlen - pos) return -1;
    this->label_type.assign(((const char*)buf) + offset + pos, __label_type_len__ - 1);
    pos += __label_type_len__;

    thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->distance_x, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->distance_y, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->probability, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->bounding_box._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmObstacle::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->label_type.size() + 4 + 1;
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->bounding_box._getEncodedSizeNoHash();
    return enc_size;
}

uint64_t ZcmObstacle::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmObstacle::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmObstacle::getHash };

    uint64_t hash = (uint64_t)0x1dfa06cbd58d5325LL +
         ZcmObstacleGeometry::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
